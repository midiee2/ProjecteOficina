/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Tecnic;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-02-22T16:17:54.505Z")

@Api(value = "tecnic", description = "the tecnic API")
public interface TecnicApi {

    @ApiOperation(value = "afegeix un tecnic a la base de dades", nickname = "addTecnic", notes = "Afegeix un tecnic al sistema", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "item creat"),
        @ApiResponse(code = 400, message = "dades invalides, objecte invalides"),
        @ApiResponse(code = 409, message = "aquest tecnic ja existeix") })
    @RequestMapping(value = "/tecnic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addTecnic(@ApiParam(value = "Instancia de tecnic afegit"  )  @Valid @RequestBody Tecnic objecteTecnic);


    @ApiOperation(value = "Buscar tecnics per nom", nickname = "findTecnic", notes = "Retorna array de tecnics amb aquell nom", response = Tecnic.class, responseContainer = "List", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tot correcte", response = Tecnic.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Tecnic no trobat") })
    @RequestMapping(value = "/tecnic/findByNom",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Tecnic>> findTecnic(@NotNull @ApiParam(value = "Filtrar per nom", required = true) @Valid @RequestParam(value = "nom", required = true) String nom);


    @ApiOperation(value = "Cerca tecnics per estat", nickname = "findTecnicByStatus", notes = "Retorna els tecnics que tinguin la etiqueta noAssignat", response = Tecnic.class, responseContainer = "List", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tot correcte", response = Tecnic.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid tag value") })
    @RequestMapping(value = "/tecnic/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Tecnic>> findTecnicByStatus(@NotNull @ApiParam(value = "estats filtrats", required = true) @Valid @RequestParam(value = "status", required = true) String status);


    @ApiOperation(value = "Cerca tecnic per ID", nickname = "getTecnicById", notes = "Retorna un unic tecnic", response = Tecnic.class, tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tot correcte", response = Tecnic.class),
        @ApiResponse(code = 400, message = "Id invalida"),
        @ApiResponse(code = 404, message = "Tecnic no trobat") })
    @RequestMapping(value = "/tecnic/{idTecnic}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Tecnic> getTecnicById(@ApiParam(value = "ID del tecnic a retornar",required=true) @PathVariable("idTecnic") Integer idTecnic);


    @ApiOperation(value = "cerca tots els tecnics", nickname = "getTecnics", notes = "Retorna tots els tecnics de la base de dades ", response = Tecnic.class, responseContainer = "List", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retorna correctament tots els tecnics", response = Tecnic.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Error de conexio") })
    @RequestMapping(value = "/tecnic",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Tecnic>> getTecnics();


    @ApiOperation(value = "Actualitza un tecnic", nickname = "updateTecnic", notes = "", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Id no valida"),
        @ApiResponse(code = 404, message = "Tecnic no trobat"),
        @ApiResponse(code = 405, message = "Excepcio de validacio") })
    @RequestMapping(value = "/tecnic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateTecnic(@ApiParam(value = "Objecte Tecnic que sha de modificar" ,required=true )  @Valid @RequestBody Tecnic body);

}
